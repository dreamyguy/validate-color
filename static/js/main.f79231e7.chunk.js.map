{"version":3,"sources":["serviceWorker.js","validate-color/index.js","app/components/Input.js","app/components/Footer.js","app/App.js","index.js"],"names":["Boolean","window","location","hostname","match","isString","color","htmlColorNames","htmlColorNamesSpecial","validateHTMLColorHex","test","validateHTMLColorRgb","optionalCommaOrRequiredSpace","optionalDecimals","anyPercentage","hundredPercent","alphaPercentage","endingWithAlphaPercentage","validateHTMLColorHsl","turnRegex","regexLogic","regex","RegExp","validateHTMLColorHwb","validateHTMLColorLab","labParam","validateColor","status","map","c","toLowerCase","validateHTMLColorName","validateHTMLColorSpecialName","Input","props","state","inputValue","this","classes","title","type","placeholder","onChangeHandler","value","isValid","className","htmlFor","autoComplete","onChange","e","setState","target","Component","Footer","emoji","lineHeight","href","App","showMessage","repo","isPride","style","backgroundColor","validate","renderValidStatus","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gECdAC,EAAW,SAACC,GAAD,OAAWA,GAA0B,kBAAVA,GAEtCC,EAAiB,CACrB,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,aACA,YACA,cACA,cACA,gBACA,eACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,eAGIC,EAAwB,CAAC,eAAgB,UAAW,eA+B7CC,EAAuB,SAACH,GACnC,GAAID,EAASC,GAAQ,CAEnB,OAAOA,GADO,6CACQI,KAAKJ,KAYlBK,EAAuB,SAACL,GACnC,GAAID,EAASC,GAAQ,CAEnB,OAAOA,GADO,iGACQI,KAAKJ,KAIzBM,EAA4B,uBAC5BC,EAAgB,aAChBC,EAAa,gBAAYD,EAAZ,OACbE,EAAc,4BACdC,EAAe,aAASD,EAAT,iBAAgCF,EAAhC,UACfI,EAAyB,oCAAgCD,EAAhC,aAQlBE,EAAuB,SAACZ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","file":"static/js/main.f79231e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Good article on HTML Colors:\n// https://dev.to/alvaromontoro/the-ultimate-guide-to-css-colors-2020-edition-1bh1#hsl\n\n// Check if parameter is defined and a string\nconst isString = (color) => color && typeof color === \"string\";\n// All existing HTML color names\nconst htmlColorNames = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"Black\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenrod\",\n  \"DarkGray\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"Goldenrod\",\n  \"Gray\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenrodYellow\",\n  \"LightGray\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquamarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenrod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"RebeccaPurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\",\n];\n// These 3 values are valid, usable color names, which are special in their own way\nconst htmlColorNamesSpecial = [\"currentColor\", \"inherit\", \"transparent\"];\n\n// Validate HTML color name (red, yellow, etc)\nexport const validateHTMLColorName = (color) => {\n  let status = false;\n  if (isString(color)) {\n    htmlColorNames.map((c) => {\n      if (color.toLowerCase() === c.toLowerCase()) {\n        status = true;\n      }\n      return null;\n    });\n  }\n  return status;\n};\n\n// Validate HTML color special name (currentColor, inherit, etc)\nexport const validateHTMLColorSpecialName = (color) => {\n  let status = false;\n  if (isString(color)) {\n    htmlColorNamesSpecial.map((c) => {\n      if (color.toLowerCase() === c.toLowerCase()) {\n        status = true;\n      }\n      return null;\n    });\n  }\n  return status;\n};\n\n// Validate HTML color 'hex'\nexport const validateHTMLColorHex = (color) => {\n  if (isString(color)) {\n    const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$/i;\n    return color && regex.test(color);\n  }\n};\n\n// Validate HTML color 'rgb'\n// -- legacy notation\n// color: rgb(255, 255, 255);\n// color: rgba(255, 255, 255, 1);\n// -- new notation\n// color: rgb(255 255 255);\n// color: rgb(255 255 255 / 1);\n// Note that 'rgba()' is now merged into 'rgb()'\nexport const validateHTMLColorRgb = (color) => {\n  if (isString(color)) {\n    const regex = /(rgb)a?\\((\\s*\\d+%?\\s*?,?\\s*){2}(\\s*\\d+%?\\s*?,?\\s*\\)?)(\\s*,?\\s*\\/?\\s*(0?\\.?\\d+%?\\s*)?|1|0)?\\)$/i;\n    return color && regex.test(color);\n  }\n};\n\nconst optionalCommaOrRequiredSpace = `((\\\\s*,\\\\s*)|(\\\\s+))`;\nconst optionalDecimals = `(\\\\.\\\\d+)?`;\nconst anyPercentage = `((\\\\d*${optionalDecimals})%)`;\nconst hundredPercent = `(([0-9]|[1-9][0-9]|100)%)`;\nconst alphaPercentage = `(((${hundredPercent}))|(0?${optionalDecimals})|1))?`;\nconst endingWithAlphaPercentage = `\\\\s*?\\\\)?)(\\\\s*?(\\\\/?)\\\\s+${alphaPercentage}\\\\s*?\\\\)$`;\n\n// Validate HTML color 'hsl'\n// -- These units are valid for the first parameter\n// 'deg': degrees | full circle = 360\n// 'gra': gradians | full circle = 400\n// 'radians': radians | full circle = 2π (approx. 6.28)\n// 'turn': turns | full circle = 1\nexport const validateHTMLColorHsl = (color) => {\n  if (isString(color)) {\n    // Validate each possible unit value separately, as their values differ\n    const degRegex = `(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)`;\n    const graRegex = `(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9][0-9]|400)gra)`;\n    const radRegex = `((([0-5])?\\\\.\\\\d+|6\\\\.([0-9]|1[0-9]|2[0-8])|[0-6])rad)`;\n    const turnRegex = `((0?${optionalDecimals}|1)turn)`;\n    const regexLogic = `(hsl)a?\\\\((\\\\s*?(${degRegex}|${graRegex}|${radRegex}|${turnRegex})${optionalCommaOrRequiredSpace})(\\\\s*?(0|${hundredPercent})${optionalCommaOrRequiredSpace})(\\\\s*?(0|${hundredPercent})\\\\s*?\\\\)?)(\\\\s*?(\\\\/?|,?)\\\\s*?(((${hundredPercent}))|(0?${optionalDecimals})|1))?\\\\)$`;\n    const regex = new RegExp(regexLogic);\n    return color && regex.test(color);\n  }\n};\n\n// Validate HTML color 'hwb'\n// -- 'hwb' accepts 'deg' as unit in its 1st property, which stands for 'hue'\n// 'deg': degrees | full circle = 360\nexport const validateHTMLColorHwb = (color) => {\n  if (isString(color)) {\n    const degRegex = `(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)`;\n    const regexLogic = `(hwb\\\\(\\\\s*?${degRegex}\\\\s+)((0|${hundredPercent})\\\\s+)((0|${hundredPercent})${endingWithAlphaPercentage}`;\n    const regex = new RegExp(regexLogic);\n    return color && regex.test(color);\n  }\n};\n\n// Validate HTML color 'lab'\n// -- 'lab' 2nd & 3rd parameters are any number between -160 & 160\nexport const validateHTMLColorLab = (color) => {\n  if (isString(color)) {\n    const labParam = `(-?(([0-9]|[1-9][0-9]|1[0-5][0-9])${optionalDecimals}?|160))`;\n    const regexLogic = `(lab\\\\(\\\\s*?${anyPercentage}\\\\s+${labParam}\\\\s+${labParam}${endingWithAlphaPercentage}`;\n    const regex = new RegExp(regexLogic);\n    return color && regex.test(color);\n  }\n};\n\n// Validate only HTML colors (`hex`, `rgb`, `rgba`, `hsl`, `hsla`, `hwb`, `lab`), without `name` og `special name`**\nexport const validateHTMLColor = (color) => {\n  if (\n    (color && validateHTMLColorHex(color)) ||\n    validateHTMLColorRgb(color) ||\n    validateHTMLColorHsl(color) ||\n    validateHTMLColorHwb(color) ||\n    validateHTMLColorLab(color)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst validateColor = (color) => {\n  // Former validation - source: https://www.regextester.com/103656\n  // if (isString(color)) {\n  //   const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1|0)?\\)$/i;\n  //   return color && regex.test(color);\n  // }\n  // New validation\n  if (\n    (color && validateHTMLColorHex(color)) ||\n    validateHTMLColorName(color) ||\n    validateHTMLColorSpecialName(color) ||\n    validateHTMLColorRgb(color) ||\n    validateHTMLColorHsl(color) ||\n    validateHTMLColorHwb(color) ||\n    validateHTMLColorLab(color)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport default validateColor;\n","import React, { Component } from 'react';\n\n// Import styles\nimport './Input.scss';\n\nclass Input extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      inputValue: ''\n    }\n  }\n\n  render() {\n    const {\n      classes = '', // accepts CSS classNames as string\n      title = '',\n      type = 'text',\n      placeholder = 'Validate color here',\n      onChangeHandler,\n      value = '',\n      isValid,\n    } = this.props;\n    const {\n      inputValue,\n    } = this.state;\n    return (\n      <>\n        <div className={`input${classes ? ' ' + classes : ''}`}>\n          <label htmlFor=\"input\" >\n            {title &&\n              <p className=\"input__label\">{title}</p>\n            }\n            <input\n              className={`input__field${isValid ? ' valid' : ''}`}\n              autoComplete=\"off\"\n              value={value ? value : inputValue}\n              type={type}\n              placeholder={placeholder}\n              onChange={(e) => {\n                this.setState({\n                  inputValue: e.target.value\n                })\n                onChangeHandler(e.target.value)\n              }}\n            />\n          </label>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Input;\n","import React from 'react';\nimport Emoji from 'react-emojis';\n\nconst Footer = () => (\n  <footer>\n    Brought to you by &nbsp;<Emoji emoji=\"man-technologist\" lineHeight=\"1.2\"/>&nbsp;<a className=\"link\" href=\"http://sidhree.com\">Wallace Sidhrée</a>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport ForkMeOnGithub from 'fork-me-on-github';\nimport Emoji from 'react-emojis';\n// Import 'validate-color' directly\nimport validateColor from './../validate-color/index';\n\n// Import components\nimport Input from './components/Input';\nimport Footer from './components/Footer';\n\n// Import styles\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showMessage: false, // When not set, show Emoji (default)\n      isValid: false,\n      inputValue: ''\n    }\n  }\n\n  validate(color) {\n    if (color && color !== '' && validateColor(color)) {\n      return true;\n    }\n    return false;\n  }\n\n  renderValidStatus() {\n    const {\n      showMessage,\n      inputValue,\n      isValid,\n    } = this.state;\n    return (\n      <div className={`input__validation${showMessage ? ' show-message' : ''}`}>\n        <span>&nbsp;</span>\n        {isValid\n          ?\n            <span className=\"valid\">\n              {showMessage\n                ?\n                  `'${inputValue}' is valid!`\n                :\n                  <Emoji emoji=\"check-mark-button\"/>\n              }\n            </span>\n          :\n            <>\n              {inputValue &&\n                <span className=\"not-valid\">\n                  {showMessage\n                    ?\n                      `'${inputValue}' is not a valid color value!`\n                    :\n                      null\n                  }\n                </span>\n              }\n            </>\n        }\n      </div>\n    );\n  }\n\n  render () {\n    const {\n      type = 'text',\n      placeholder = 'Validate color here'\n    } = this.props;\n    const {\n      inputValue,\n      isValid,\n    } = this.state;\n    return (\n      <>\n        <div className=\"app\">\n          <ForkMeOnGithub repo=\"https://github.com/dreamyguy/validate-color\" isPride/>\n          <div className=\"header\">\n            <div className=\"header__content\">\n              <h1><Emoji emoji=\"check-mark-button\"/>&nbsp;&nbsp;validate-color&nbsp;&nbsp;<Emoji emoji=\"rainbow\"/></h1>\n              <h2>Validate HTML colors by 'name', 'special name', 'hex', 'rgb', 'rgba', 'hsl', 'hsla', 'hwb' or 'lab' values</h2>\n            </div>\n          </div>\n          <div className=\"validate-color\" style={{backgroundColor: validateColor(inputValue) ? inputValue : 'transparent'}}>\n            <Input\n              title=\"Color validator\"\n              value={inputValue}\n              type={type}\n              placeholder={placeholder}\n              isValid={isValid}\n              onChangeHandler={\n                (value) => {\n                  this.setState({\n                    isValid: this.validate(value),\n                    inputValue: value\n                  })\n                }\n              }\n            />\n            {this.renderValidStatus()}\n          </div>\n        </div>\n        <Footer/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n// Import components\nimport App from './app/App';\n// Import styles\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}