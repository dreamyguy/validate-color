{"version":3,"sources":["serviceWorker.js","validate-color/index.js","app/components/Input.js","app/components/Footer.js","app/App.js","index.js"],"names":["Boolean","window","location","hostname","match","validateColor","color","status","map","c","toLowerCase","validateHTMLColorName","test","validateHTMLColor","Input","props","state","inputValue","this","classes","title","type","placeholder","onChangeHandler","value","isValid","className","htmlFor","autoComplete","onChange","e","setState","target","Component","Footer","emoji","lineHeight","href","App","showMessage","repo","isPride","style","backgroundColor","validate","renderValidStatus","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gEC+KSC,EANO,SAAAC,GAAK,SACzBA,IA3LmC,SAAAA,GACnC,IAAIC,GAAS,EAEb,GAAqB,kBAAVD,EAAoB,CACN,CACrB,YACA,aACA,SACA,aACA,cACA,UACA,MACA,YACA,UACA,OACA,YACA,UACA,WACA,kBACA,gBACA,cACA,QACA,SACA,YACA,aACA,SACA,OACA,SACA,cACA,eACA,uBACA,aACA,WACA,YACA,gBACA,QACA,YACA,WACA,UACA,OACA,SACA,SACA,UACA,UACA,eACA,eACA,gBACA,aACA,aACA,aACA,cACA,SACA,SACA,YACA,gBACA,kBACA,cACA,aACA,YACA,OACA,YACA,YACA,aACA,oBACA,cACA,iBACA,WACA,cACA,QACA,YACA,cACA,YACA,QACA,iBACA,mBACA,eACA,gBACA,WACA,OACA,OACA,OACA,YACA,gBACA,aACA,YACA,kBACA,gBACA,YACA,YACA,iBACA,aACA,YACA,UACA,eACA,cACA,aACA,iBACA,kBACA,YACA,OACA,aACA,WACA,OACA,eACA,WACA,iBACA,SACA,cACA,QACA,YACA,MACA,YACA,aACA,YACA,gBACA,OACA,YACA,cACA,SACA,QACA,SACA,QACA,OACA,WACA,YACA,QACA,YACA,aACA,aACA,WACA,QACA,UACA,cACA,QACA,eACA,QACA,gBACA,YACA,YACA,YACA,SACA,WACA,OACA,UACA,iBACA,YACA,gBACA,QACA,eAEaE,KAAI,SAAAC,GAIjB,OAHIH,EAAMI,gBAAkBD,EAAEC,gBAC5BH,GAAS,GAEJ,QAGX,OAAOA,EA8BGI,CAAsBL,KAzBD,SAAAA,GAE/B,GAAqB,kBAAVA,EAAoB,CAE7B,SACEA,IAFY,2HAEGM,KAAKN,KAoBkBO,CAAkBP,KCvI/CQ,G,wDA/Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,WAAY,IAHE,E,qDAOR,IAAD,SASHC,KAAKH,MATF,IAELI,eAFK,MAEK,GAFL,MAGLC,aAHK,MAGG,GAHH,MAILC,YAJK,MAIE,OAJF,MAKLC,mBALK,MAKS,sBALT,EAMLC,EANK,EAMLA,gBANK,IAOLC,aAPK,MAOG,GAPH,EAQLC,EARK,EAQLA,QAGAR,EACEC,KAAKF,MADPC,WAEF,OACE,oCACE,yBAAKS,UAAS,eAAUP,EAAU,IAAMA,EAAU,KAChD,2BAAOQ,QAAQ,SACZP,GACC,uBAAGM,UAAU,gBAAgBN,GAE/B,2BACEM,UAAS,sBAAiBD,EAAU,SAAW,IAC/CG,aAAa,MACbJ,MAAOA,GAAgBP,EACvBI,KAAMA,EACNC,YAAaA,EACbO,SAAU,SAACC,GACT,EAAKC,SAAS,CACZd,WAAYa,EAAEE,OAAOR,QAEvBD,EAAgBO,EAAEE,OAAOR,iB,GAtCrBS,cCILC,EANA,kBACb,yDAC0B,kBAAC,IAAD,CAAOC,MAAM,mBAAmBC,WAAW,QADrE,OACkF,uBAAGV,UAAU,OAAOW,KAAK,sBAAzB,wBC0GrEC,G,wDAjGb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXuB,aAAa,EACbd,SAAS,EACTR,WAAY,IALE,E,qDASTX,GACP,SAAIA,GAAmB,KAAVA,IAAgBD,EAAcC,M,0CAMxB,IAAD,EAKdY,KAAKF,MAHPuB,EAFgB,EAEhBA,YACAtB,EAHgB,EAGhBA,WACAQ,EAJgB,EAIhBA,QAEF,OACE,yBAAKC,UAAS,2BAAsBa,EAAc,gBAAkB,KAClE,sCACCd,EAEG,0BAAMC,UAAU,SACba,EAAW,WAEJtB,EAFI,eAIR,kBAAC,IAAD,CAAOkB,MAAM,uBAInB,oCACGlB,GACC,0BAAMS,UAAU,aACba,EAAW,WAEJtB,EAFI,iCAIR,U,+BAUT,IAAD,SAIJC,KAAKH,MAJD,IAENM,YAFM,MAEC,OAFD,MAGNC,mBAHM,MAGQ,sBAHR,IAQJJ,KAAKF,MAFPC,EANM,EAMNA,WACAQ,EAPM,EAONA,QAEF,OACE,oCACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAgBc,KAAK,8CAA8CC,SAAO,IAC1E,yBAAKf,UAAU,UACb,yBAAKA,UAAU,mBACb,4BAAI,kBAAC,IAAD,CAAOS,MAAM,sBAAjB,iCAA4E,kBAAC,IAAD,CAAOA,MAAM,aACzF,8GAGJ,yBAAKT,UAAU,iBAAiBgB,MAAO,CAACC,gBAAiBtC,EAAcY,GAAcA,EAAa,gBAChG,kBAAC,EAAD,CACEG,MAAM,kBACNI,MAAOP,EACPI,KAAMA,EACNC,YAAaA,EACbG,QAASA,EACTF,gBACE,SAACC,GACC,EAAKO,SAAS,CACZN,QAAS,EAAKmB,SAASpB,GACvBP,WAAYO,OAKnBN,KAAK2B,sBAGV,kBAAC,EAAD,W,GA5FUZ,c,MCLlBa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.429eb1f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Validate HTML color string (red, yellow, etc)\nexport const validateHTMLColorName = color => {\n  let status = false;\n  // Only do any of this if 'color' is a string\n  if (typeof color === 'string') {\n    const htmlColorNames = [\n      'IndianRed',\n      'LightCoral',\n      'Salmon',\n      'DarkSalmon',\n      'LightSalmon',\n      'Crimson',\n      'Red',\n      'FireBrick',\n      'DarkRed',\n      'Pink',\n      'LightPink',\n      'HotPink',\n      'DeepPink',\n      'MediumVioletRed',\n      'PaleVioletRed',\n      'LightSalmon',\n      'Coral',\n      'Tomato',\n      'OrangeRed',\n      'DarkOrange',\n      'Orange',\n      'Gold',\n      'Yellow',\n      'LightYellow',\n      'LemonChiffon',\n      'LightGoldenrodYellow',\n      'PapayaWhip',\n      'Moccasin',\n      'PeachPuff',\n      'PaleGoldenrod',\n      'Khaki',\n      'DarkKhaki',\n      'Lavender',\n      'Thistle',\n      'Plum',\n      'Violet',\n      'Orchid',\n      'Fuchsia',\n      'Magenta',\n      'MediumOrchid',\n      'MediumPurple',\n      'RebeccaPurple',\n      'BlueViolet',\n      'DarkViolet',\n      'DarkOrchid',\n      'DarkMagenta',\n      'Purple',\n      'Indigo',\n      'SlateBlue',\n      'DarkSlateBlue',\n      'MediumSlateBlue',\n      'GreenYellow',\n      'Chartreuse',\n      'LawnGreen',\n      'Lime',\n      'LimeGreen',\n      'PaleGreen',\n      'LightGreen',\n      'MediumSpringGreen',\n      'SpringGreen',\n      'MediumSeaGreen',\n      'SeaGreen',\n      'ForestGreen',\n      'Green',\n      'DarkGreen',\n      'YellowGreen',\n      'OliveDrab',\n      'Olive',\n      'DarkOliveGreen',\n      'MediumAquamarine',\n      'DarkSeaGreen',\n      'LightSeaGreen',\n      'DarkCyan',\n      'Teal',\n      'Aqua',\n      'Cyan',\n      'LightCyan',\n      'PaleTurquoise',\n      'Aquamarine',\n      'Turquoise',\n      'MediumTurquoise',\n      'DarkTurquoise',\n      'CadetBlue',\n      'SteelBlue',\n      'LightSteelBlue',\n      'PowderBlue',\n      'LightBlue',\n      'SkyBlue',\n      'LightSkyBlue',\n      'DeepSkyBlue',\n      'DodgerBlue',\n      'CornflowerBlue',\n      'MediumSlateBlue',\n      'RoyalBlue',\n      'Blue',\n      'MediumBlue',\n      'DarkBlue',\n      'Navy',\n      'MidnightBlue',\n      'Cornsilk',\n      'BlanchedAlmond',\n      'Bisque',\n      'NavajoWhite',\n      'Wheat',\n      'BurlyWood',\n      'Tan',\n      'RosyBrown',\n      'SandyBrown',\n      'Goldenrod',\n      'DarkGoldenrod',\n      'Peru',\n      'Chocolate',\n      'SaddleBrown',\n      'Sienna',\n      'Brown',\n      'Maroon',\n      'White',\n      'Snow',\n      'HoneyDew',\n      'MintCream',\n      'Azure',\n      'AliceBlue',\n      'GhostWhite',\n      'WhiteSmoke',\n      'SeaShell',\n      'Beige',\n      'OldLace',\n      'FloralWhite',\n      'Ivory',\n      'AntiqueWhite',\n      'Linen',\n      'LavenderBlush',\n      'MistyRose',\n      'Gainsboro',\n      'LightGray',\n      'Silver',\n      'DarkGray',\n      'Gray',\n      'DimGray',\n      'LightSlateGray',\n      'SlateGray',\n      'DarkSlateGray',\n      'Black',\n      'Transparent'\n    ];\n    htmlColorNames.map(c => {\n      if (color.toLowerCase() === c.toLowerCase()) {\n        status = true;\n      }\n      return null;\n    })\n  }\n  return status;\n};\n\n// Validate HTML color as 'hex', 'rgb', 'rgba', 'hsl', 'hsla'\n// source: https://www.regextester.com/103656\nexport const validateHTMLColor = color => {\n  // Only do any of this if 'color' is a string\n  if (typeof color === 'string') {\n    const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)$/i;\n    return (\n      color && regex.test(color)\n        ? true\n        : false\n    )\n  }\n};\n\nexport const validateHTMLColorHex = color => {\n  // Only do any of this if 'color' is a string\n  if (typeof color === 'string') {\n    const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$/i;\n    return (\n      color && regex.test(color)\n        ? true\n        : false\n    )\n  }\n};\n\nconst validateColor = color => (\n  color && (validateHTMLColorName(color) || validateHTMLColor(color))\n    ? true\n    : false\n);\n\nexport default validateColor;\n","import React, { Component } from 'react';\n\n// Import styles\nimport './Input.scss';\n\nclass Input extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      inputValue: ''\n    }\n  }\n\n  render() {\n    const {\n      classes = '', // accepts CSS classNames as string\n      title = '',\n      type = 'text',\n      placeholder = 'Validate color here',\n      onChangeHandler,\n      value = '',\n      isValid,\n    } = this.props;\n    const {\n      inputValue,\n    } = this.state;\n    return (\n      <>\n        <div className={`input${classes ? ' ' + classes : ''}`}>\n          <label htmlFor=\"input\" >\n            {title &&\n              <p className=\"input__label\">{title}</p>\n            }\n            <input\n              className={`input__field${isValid ? ' valid' : ''}`}\n              autoComplete=\"off\"\n              value={value ? value : inputValue}\n              type={type}\n              placeholder={placeholder}\n              onChange={(e) => {\n                this.setState({\n                  inputValue: e.target.value\n                })\n                onChangeHandler(e.target.value)\n              }}\n            />\n          </label>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Input;\n","import React from 'react';\nimport Emoji from 'react-emojis';\n\nconst Footer = () => (\n  <footer>\n    Brought to you by &nbsp;<Emoji emoji=\"man-technologist\" lineHeight=\"1.2\"/>&nbsp;<a className=\"link\" href=\"http://sidhree.com\">Wallace Sidhrée</a>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport ForkMeOnGithub from 'fork-me-on-github';\nimport Emoji from 'react-emojis';\n// Import 'validate-color' directly\nimport validateColor from './../validate-color/index';\n\n// Import components\nimport Input from './components/Input';\nimport Footer from './components/Footer';\n\n// Import styles\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showMessage: false, // When not set, show Emoji (default)\n      isValid: false,\n      inputValue: ''\n    }\n  }\n\n  validate(color) {\n    if (color && color !== '' && validateColor(color)) {\n      return true;\n    }\n    return false;\n  }\n\n  renderValidStatus() {\n    const {\n      showMessage,\n      inputValue,\n      isValid,\n    } = this.state;\n    return (\n      <div className={`input__validation${showMessage ? ' show-message' : ''}`}>\n        <span>&nbsp;</span>\n        {isValid\n          ?\n            <span className=\"valid\">\n              {showMessage\n                ?\n                  `'${inputValue}' is valid!`\n                :\n                  <Emoji emoji=\"check-mark-button\"/>\n              }\n            </span>\n          :\n            <>\n              {inputValue &&\n                <span className=\"not-valid\">\n                  {showMessage\n                    ?\n                      `'${inputValue}' is not a valid color value!`\n                    :\n                      null\n                  }\n                </span>\n              }\n            </>\n        }\n      </div>\n    );\n  }\n\n  render () {\n    const {\n      type = 'text',\n      placeholder = 'Validate color here'\n    } = this.props;\n    const {\n      inputValue,\n      isValid,\n    } = this.state;\n    return (\n      <>\n        <div className=\"app\">\n          <ForkMeOnGithub repo=\"https://github.com/dreamyguy/validate-color\" isPride/>\n          <div className=\"header\">\n            <div className=\"header__content\">\n              <h1><Emoji emoji=\"check-mark-button\"/>&nbsp;&nbsp;validate-color&nbsp;&nbsp;<Emoji emoji=\"rainbow\"/></h1>\n              <h2>Validate HTML colors by 'name', 'hex', 'rgb', 'rgba', 'hsl' or 'hsla' values</h2>\n            </div>\n          </div>\n          <div className=\"validate-color\" style={{backgroundColor: validateColor(inputValue) ? inputValue : 'transparent'}}>\n            <Input\n              title=\"Color validator\"\n              value={inputValue}\n              type={type}\n              placeholder={placeholder}\n              isValid={isValid}\n              onChangeHandler={\n                (value) => {\n                  this.setState({\n                    isValid: this.validate(value),\n                    inputValue: value\n                  })\n                }\n              }\n            />\n            {this.renderValidStatus()}\n          </div>\n        </div>\n        <Footer/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n// Import components\nimport App from './app/App';\n// Import styles\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}